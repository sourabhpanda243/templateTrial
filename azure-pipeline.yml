trigger:
  branches:
    include:
      - master
    exclude:
      - azure-pipeline.yml

pool: 
  name: 'Default'
  demands:
  - agent.os -equals Linux

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '905fc28f-8f4e-4f00-bcad-78b7445665d1'
  imageRepository: 'sql-connection/sql-connection'
  containerRegistry: 'sgsin01acr01.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: 'latest'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    steps:
   
    - task: CmdLine@2
      inputs:
        script: |
          echo > Dockerfile
          
          cat > Dockerfile <<EOF
         
          # parent image
          FROM python:3.7-slim

          # install FreeTDS and dependencies
          RUN apt-get update \
            && apt-get install unixodbc -y \
            && apt-get install unixodbc-dev -y \
            && apt-get install freetds-dev -y \
            && apt-get install freetds-bin -y \
            && apt-get install tdsodbc -y \
            && apt-get install --reinstall build-essential -y

          # populate "ocbcinst.ini"
          RUN echo "[FreeTDS]\n\
          Description = FreeTDS unixODBC Driver\n\
          Driver = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\n\
          Setup = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so" >> /etc/odbcinst.ini

          
          # install pyodbc (and, optionally, sqlalchemy)
          RUN pip install --trusted-host pypi.python.org pyodbc==4.0.26 sqlalchemy==1.3.5

          COPY . .
          CMD ["python", "main.py"]
          EOF
    

    - task: CmdLine@2
      inputs:
        script: |
          mkdir manifests    
          
          echo > cronjob.yml
          
          cat > cronjob.yml <<EOF
          apiVersion: batch/v1beta1
          kind: CronJob
          metadata:
            name: sql-connection
          spec:
            schedule: "*/2 * * * *"
            jobTemplate:
              spec:
                template:
                  spec:
                    containers:
                    - name: sql-connection
                      image:  sgsin01acr01.azurecr.io/sql-connection/sql-connection:latest
                      imagePullPolicy: IfNotPresent
                    restartPolicy: OnFailure
          EOF

          

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)


    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'sqlConnection'
        publishLocation: 'pipeline'
        
    - task: CmdLine@2
      inputs:
        script: 'docker rmi -f $(docker images -a -q)'