trigger:
  branches:
    include:
      - master
    exclude:
      - azure-pipeline.yml

pool: 
  name: 'Default'
  demands:
  - agent.os -equals Linux

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '905fc28f-8f4e-4f00-bcad-78b7445665d1'
  imageRepository: 'sql-connection/sql-connection'
  containerRegistry: 'sgsin01acr01.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: 'latest'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    steps:
   
    - task: CmdLine@2
      inputs:
        script: |
          echo > Dockerfile
          
          cat > Dockerfile <<EOF
         
          FROM python:3.8-slim-buster

          WORKDIR /app

          ENV ACCEPT_EULA=Y
          RUN apt-get update -y && apt-get update \
            && apt-get install -y --no-install-recommends curl gcc g++ gnupg unixodbc-dev

          RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
            && curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list \
            && apt-get update \
            && apt-get install -y --no-install-recommends --allow-unauthenticated msodbcsql17 mssql-tools \
            && echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile \
            && echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc

          COPY requirements.txt requirements.txt
          RUN pip3 install -r requirements.txt

          COPY . .
          CMD ["python", "main.py"]
          EOF
    

    - task: CmdLine@2
      inputs:
        script: |
          mkdir manifests    
          
          echo > cronjob.yml
          
          cat > cronjob.yml <<EOF
          apiVersion: batch/v1beta1
          kind: CronJob
          metadata:
            name: sql-connection
          spec:
            schedule: "*/2 * * * *"
            jobTemplate:
              spec:
                template:
                  spec:
                    containers:
                    - name: sql-connection
                      image:  sgsin01acr01.azurecr.io/sql-connection/sql-connection:latest
                      imagePullPolicy: IfNotPresent
                    restartPolicy: OnFailure
          EOF

          

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)


    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'sqlConnection'
        publishLocation: 'pipeline'
        
    - task: CmdLine@2
      inputs:
        script: 'docker rmi -f $(docker images -a -q)'